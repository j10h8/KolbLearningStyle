@page "/TestPage"
@inject IResultService ResultService

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager


<PageTitle>Test Page</PageTitle>

<div class="font-example">


	<div class="center-container">
	</div>
	<div class="center-container">

		<p>

			<h1>
				Kolbs lärstilar: testa din inlärningsstil
			</h1>
			<br />

			<br />
			<h2> Instruktion </h2>
			<br />
			<b>Nedan ser du nio rader med fyra ord i varje rad</b>



			<ul>
				@* <br /> *@
				@*<p>
				Jämför varje vågrät uppsättning med fyra ord genom att ge 4 till det ord som du tycker bäst
				beskriver din inlärningsstil, ge 3 till det ord som näst bäst karakteriserar din inlärningsstil, 2
				till det näst minst karakteristiska ordet och 1 till det ord som minst karakteriserar hur du lär
				dig.
				</p>*@

				<SurveyPrompt Title="Jämför varje vågrät uppsättning med fyra ord genom att ge 4 till det ord som du tycker bäst
			beskriver din inlärningsstil, ge 3 till det ord som näst bäst karakteriserar din inlärningsstil, 2
			till det näst minst karakteristiska ordet och 1 till det ord som minst karakteriserar hur du lär
			dig." />
				@*<br />
				<hr />
				<br />*@
				@*<p>
				<b>
				Uppskatta varje rad för sig och tänk på situationer då du arbetar eller studerar och tar in ny
				information eller arbetsuppgifter, hur gör du?
				</b>
				</p>*@

				<SurveyPrompt Title="Uppskatta varje rad för sig och tänk på situationer då du arbetar eller studerar och tar in ny
			information eller arbetsuppgifter, hur gör du?" />

				@*<br />
				<hr />
				<br />*@
				@*<p>
				Kontrollera att du sätter olika rangordning på vart och ett av de fyra olika orden i varje
				uppsättning. Gör inga garderingar. Fundera inte för länge på varje rad, arbeta spontant. Du
				kan tycka att det är svårt, men rangordna ändå.

				</p>*@
				<SurveyPrompt Title="Kontrollera att du sätter olika rangordning på vart och ett av de fyra olika orden i varje
			uppsättning. Gör inga garderingar. Fundera inte för länge på varje rad, arbeta spontant. Du
			kan tycka att det är svårt, men rangordna ändå." />
				@* <br /> *@

				<p> <b>Rangordna nedan 9 påståenden med siffrorna 1, 2, 3, 4, se exempel: </b></p>
				<p> <b> 1. prioritera ____2  |  pröva ____4  |  sammanfatta ____3  |  praktisera ____1 </b></p>

			</ul>
		</p>

		<br />

		<EditForm Model="InputModel" OnSubmit="HandleSubmitAsync">
			<div style="display:flex; margin-bottom:0.5rem;">
				<label2> <b>1. </b> </label2>
				<br />
				<label>Prioritera</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input11">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Pröva</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input12">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Sammanfatta</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input13">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Praktisera</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input14">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
			</div>
			<div style="display:flex; margin-bottom:0.5rem;">
				<label2>
					<b>2. </b>
				</label2>
				<label>Mottaga</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input21">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Uppmärksamma</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input22">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Analysera</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input23">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Opartisk</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input24">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
			</div>
			<div style="display:flex; margin-bottom:0.5rem;">
				<label2><b>3. </b></label2>
				<label>Känna</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input31">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Betrakta</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input32">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Tänka</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input33">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Göra</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input34">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
			</div>
			<div style="display:flex; margin-bottom:0.5rem;">
				<label2> <b>4. </b></label2>
				<label>Acceptera</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input41">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Relatera</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input42">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Värdera</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input43">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Riskera</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input44">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
			</div>
			<div style="display:flex; margin-bottom:0.5rem;">
				<label2><b>5. </b></label2>
				<label>Intuition</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input51">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Svara</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input52">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Logik</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input53">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Fråga</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input54">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
			</div>
			<div style="display:flex; margin-bottom:0.5rem;">
				<label2><b>6. </b></label2>
				<label>Konkretisera</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input61">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Observera</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input62">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Teoretisera</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input63">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Aktivera</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input64">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
			</div>
			<div style="display:flex; margin-bottom:0.5rem;">
				<label2><b>7. </b></label2>
				<label>Nuorientera</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input71">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Reflektera</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input72">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Framtidsorientera</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input73">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Tillämpa</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input74">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
			</div>
			<div style="display:flex; margin-bottom:0.5rem;">
				<label2><b>8. </b></label2>
				<label>Upplevelse</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input81">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Observation</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input82">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Begrepp</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input83">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Experiment</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input84">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
			</div>
			<div style="display:flex; margin-bottom:0.5rem;">
				<label2><b>9. </b></label2>
				<label>Känslor</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input91">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Avvakta</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input92">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Rationell</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input93">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
				<label>Engagerad</label>
				<InputSelect class="input-select" @bind-Value="InputModel.Input94">
					@for (int i = 1; i < 5; i++)
					{
						<option value="@i">@i</option>
					})
				</InputSelect>
			</div>

			@*<br />
			<br />*@
			





			@*<NavLink class="nav-link" href="ResultsPage">

			</NavLink>*@
			@*<br />
			<br />
			
			<br />*@
			<br />
			@*<hr />*@
			
		</EditForm>
		<br/>
		<div class="button-row">

				<button class="btn-cancel" @onclick="ShowConfirmationModal" > AVBRYT TESTET </button>
				<button  class="btn btn-primary" @onclick="HandleSubmitAsync">SLUTFÖR TESTET</button>

			@*type="submit"*@
			<br />
			<br />

			</div>
		<br/>
		<P> . </P>	
		@*<NavLink class="nav-link" href="/">*@
				
		@*</NavLink>*@
		<br/>
		<br/>
	</div>
	<div class="right-container">
		
	</div>
	
	<br/>
</div>

<div class="modal fade" id="confirmationModal" tabindex="-1" role="dialog" aria-labelledby="confirmationModalLabel" aria-hidden="true">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="confirmationModalLabel">Confirmation</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				Are you sure you want to cancel the test?
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal">CANCEL</button>
				<button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="HandleConfirm">CONFIRM</button>
			</div>
		</div>
	</div>
</div>



@*<footer>
	<p>&copy; 2023 Kolb's "Learning Style" Test App. All rights reserved.</p>
</footer>*@

@if (_errorMessageIsVisible == true)
{
	<div class="error-message" @onclick="CloseErrorMessage">
		@*<div class="error-div">
			<h4 style="margin:0;">Du måste fylla i samtliga rutor, och du får bara fylla i en 1:a, en 2:a, en 3:a och en 4:a på varje rad.</h4>
		</div>*@

			@*<div class="modal fade" id="confirmationModal" tabindex="-1" role="dialog" aria-labelledby="confirmationModalLabel" aria-hidden="true">*@
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="confirmationModalLabel">Error</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
						Du måste fylla i samtliga rutor, och du får bara fylla i en 1:a, en 2:a, en 3:a och en 4:a på varje rad.
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-dismiss="modal">CANCEL</button>
					<button type="button" class="btn btn-primary" data-dismiss="modal">OK</button>
				</div>
			</div>
		</div>
	@*</div>*@


	</div>
}

<style>
	.error-div {
		width: auto;
		height: auto;
		background-color: white;
		padding: 1rem;
		border-radius: 0.5rem;
		box-shadow: 0 0 0.5rem 0.2rem rgba(0, 0, 0, 0.4);
	}

	.error-message {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.6);
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		z-index: 9999;
	}

	label {
		display: flex;
		width: 8rem;
		justify-content: flex-end;
		align-items: center;
		margin-right: 0.5rem;
		/*font-weight: bold;*/
	}

	label2 {
		display: flex;
		width: 2.5rem;
		justify-content: flex-end;
		align-items: center;
		margin-right: 0.5rem;
	}

	.input-select {
		border-radius: 3px;
	}

	.kolb-input {
		width: 4rem;
		margin-right: 1rem;
	}

	/* .font-example {
					font-family: 'MentiDisplay-Regular';
				} */

	.button-row {
		display: flex;
		justify-content: center;
		align-items: center;
		margin-top: 10px;
	}

	.center-container {
		padding: 250px;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		height: 1vh; /* This will center-align vertically by using the full viewport height */
		text-align: center; /* This will center-align the text horizontally */
	}

	.right-container {
		display: flex;
		/*flex-direction: column;*/
		padding-right: 10px;
		align-items: end;
		justify-content: right;
		/*height: 78vh; /* This will center-align vertically by using the full viewport height */
		text-align: center; /* This will center-align the text horizontally */
	}

	footer {
		background-color: #f8f8f8;
		padding-top: 20px;
		text-align: center;
	}

		footer p {
			color: #333;
		}
</style>




@code {
	public InputModel InputModel { get; set; } = new InputModel();
	private bool _errorMessageIsVisible = false;
	

	

	private async Task ShowConfirmationModal()
	{
		
		await JSRuntime.InvokeVoidAsync("showModal");
		_errorMessageIsVisible = false;

	}


	private void HandleConfirm()
	{

		NavigationManager.NavigateTo("/");
	}



	protected override void OnInitialized()
	{
		InputModel.Input11 = 0;
	}

	private void CloseErrorMessage()
	{
		_errorMessageIsVisible = false;
	}

	private async Task HandleSubmitAsync()
	{
		//cancelTest = false;

		if (InputModel.Input11 == 0)
		{
			_errorMessageIsVisible = true;
		}
		else if (InputModel.Input11 + InputModel.Input12 + InputModel.Input13 + InputModel.Input14 != 10 || InputModel.Input21 + InputModel.Input22 + InputModel.Input23 + InputModel.Input24 != 10 || InputModel.Input31 + InputModel.Input32 + InputModel.Input33 + InputModel.Input34 != 10 || InputModel.Input41 + InputModel.Input42 + InputModel.Input43 + InputModel.Input44 != 10 || InputModel.Input51 + InputModel.Input52 + InputModel.Input53 + InputModel.Input54 != 10 || InputModel.Input61 + InputModel.Input62 + InputModel.Input63 + InputModel.Input64 != 10 || InputModel.Input71 + InputModel.Input72 + InputModel.Input73 + InputModel.Input74 != 10 || InputModel.Input81 + InputModel.Input82 + InputModel.Input83 + InputModel.Input84 != 10 || InputModel.Input91 + InputModel.Input92 + InputModel.Input93 + InputModel.Input94 != 10 )
		{
			_errorMessageIsVisible = true;
		}
		else
		{
			// Skapa en resultmodel av inputModel
			ResultModel resultModel = GetResultFromInput(InputModel);

			// Återställ formuläret/sidan
			InputModel = new InputModel();
			InputModel.Input11 = 0;
			_errorMessageIsVisible = false;

			// Skicka resultModel till AddResultAsync (TODO: bara om användaren valt att resultatet ska få sparas i statistiken/databasen)
			await ResultService.AddResultAsync(resultModel);

			await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "result", JsonSerializer.Serialize(resultModel));

			NavigationManager.NavigateTo("/TestResults");
		}
	}

	//Räkna ut ResultModel från InputModel
	private ResultModel GetResultFromInput(InputModel input)
	{
		ResultModel result = new();
		result.IdeaGiver = Add(new int[] { input.Input21, input.Input31, input.Input41, input.Input51, input.Input61, input.Input81, input.Input91 });
		result.Explainer = Add(new int[] { input.Input12, input.Input22, input.Input32, input.Input62, input.Input72, input.Input82, input.Input92 });
		result.Gatherer = Add(new int[] { input.Input13, input.Input23, input.Input33, input.Input43, input.Input53, input.Input63, input.Input93 });
		result.Tester = Add(new int[] { input.Input14, input.Input34, input.Input44, input.Input64, input.Input74, input.Input84, input.Input94 });
		return result;
	}
	// Lägg ihop alla numbers i array
	private int Add(int[] numbers)
	{
		int sum = 0;
		foreach (int number in numbers)
		{
			sum += number;
		}
		return sum;
	}


	
}
