@page "/TestResults"
@inject IJSRuntime JSRuntime
@inject IEmailService EmailService
@inject NavigationManager NavManager
@inject IConverter PdfConverter
@* @inject EmailSettings EmailSettings *@
@inject IOptions<EmailSettings> EmailSettingsOptions
@layout CustomLayout

@using DinkToPdf;
@using DinkToPdf.Contracts;
@using Microsoft.Extensions.Options;
@using MimeKit;
@using System.IO;
@using System.Text;

<PageTitle>Ditt resultat</PageTitle>

@if (Result != null)
{
	<div id="testResults" class="text-center">
		<h1 style="margin-top: 60px; margin-bottom:40px">Ditt resultat</h1>
		<div style="margin-bottom:50px">
			<h5 style="@aeStyle[0]">Aktivt experimenterande/Prövare (AE): @Result.Tester</h5>
			<h5 style="@kuStyle[0]">Konkreta upplevelser/Idégivare (KU): @Result.IdeaGiver</h5>
			<h5 style="@atStyle[0]">Abstrakt tänkande/Sammanställare (AT): @Result.Gatherer</h5>			
			<h5 style="@roStyle[0]"> Reflekterande observation/Förklarare (RO): @Result.Explainer</h5>
		</div>
		<div style="display:flex;justify-content:center;">

			<div style="display:flex;flex-direction:row;  justify-content:center;  max-width: 60rem;">
				<div class="result-text-container" style="@aeStyle[1]; flex: 1; margin: 10px;">
				<h3 style="text-align:center; color:red;">@Result.Tester</h3>
				<h4>Prövare (AE)</h4>
				<ul>
					<li>
						Är väldigt
						aktiv och
						handlings-
						inriktad och
						därför passar
						inte
						traditionella
						föreläsningar
						då man sitter
						still mycket.
					</li>
					<li>
						Personen i
						fråga vill
						arbeta
						praktiskt och
						hittar ofta
						nya sätt
						då han/hon
						kan använda
						sina nya
						kunskaper.
					</li>
					<li>
						Prövaren styr
						sin
						upptäckarlust
						och lär sig
						genom
						experiment.
					</li>
					<li>
						Frågar sig:
						Om?
					</li>
				</ul>
			</div>
			<div class="result-text-container" style="@kuStyle[1] flex: 1; margin: 10px;">
				<h3 style="text-align:center; color:red;">@Result.IdeaGiver</h3>
				<h4>Idégivare (KU)</h4>
				<ul>
					<li>
						Vill gärna ha
						en
						känslomässig
						koppling till
						det som ska
						läras och vill
						veta varför
						man ska lära
						sig det som
						ska läras.
					</li>
					<li>
						Idégivaren lär
						sig genom att
						uppleva saker
						och lär
						genom
						att se när
						andra arbetar
						praktiskt. Att
						se film är ett
						annat sätt
						som kan vara
						till bra hjälp.
					</li>
					<li>
						Idégivaren
						lär sig mest
						då han/hon
						har
						diskussioner
						med andra.
						Frågar sig:
						Varför?
					</li>
					<li>
						Frågar sig:
						Varför?
					</li>
				</ul>
			</div>
			<div class="result-text-container" style="@atStyle[1]; flex: 1; margin: 10px;">
				<h3 style="text-align:center; color:red;">@Result.Gatherer</h3>
				<h4>Sammanställare (AT)</h4>
				<ul>
					<li>
						Tänker först och
						handlar därefter.
						Man vill ha den
						teoretiska
						bakgrunden
						först och därefter
						möjligtvis tillämpa
						kunskapen
						praktiskt.
					</li>
					<li>
						Sammanställaren
						lär sig
						bäst då man
						börjar med att
						lyssna och att
						sedan få möjlighet
						att pröva och att
						få stenciler där
						allt står
						nedskrivet.
					</li>
					<li>
						Frågar sig: Hur?
					</li>
				</ul>
			</div>
			<div class="result-text-container" style="@roStyle[1]; flex: 1; margin: 10px;">
				<h3 style="text-align:center; color:red;">@Result.Explainer</h3>
				<h4>Förklarare (RO)</h4>
				<ul>
					<li>
						Behöver ha
						teori och
						fakta och
						tänker
						igenom olika
						idéer och vill
						få fram vad
						som är viktigt.
					</li>
					<li>
						Förklararen
						vill inte prova
						praktiskt utan
						läser hellre
						manualer.
					</li>
					<li>
						Dessa elever
						klarar sig bra i
						skolan
						eftersom
						dagens skola
						har mycket
						lärarledda
						lektioner och
						föreläsningar.
					</li>
					<li>
						Frågar sig:
						Vad?
					</li>
				</ul>
			</div>
		</div>
		</div>

		<br>
		<h1 style="margin-top: 50px; margin-bottom:20px">Ditt resultat i Kolbs Lärcirkel</h1>
		<h4 style="margin-bottom:60px">
			Denna figur anger vilken inlärningsstil som är dominerande och hur starka de övriga stilarna är.
		</h4>
		<div style="flex:1">
			<ResultCircle Result="Result"></ResultCircle>
		</div>
		
		
		<div class="button-row">

			<NavLink style="margin-left: -15px;" class="nav-link" href="/">
				<button class="btn btn-primary">GÅ TILL STARTSIDAN</button>
			</NavLink>
			<NavLink style="margin-left: -15px;" class="nav-link" href="Statistic">
			<button class="btn btn-primary">SE STATISTIK</button>
			</NavLink>
			<button  class="btn btn-primary" @onclick="ToggleEmailModal">SEND RESULTS TO MY EMAIL</button>
		</div>
		
	</div>

	@if (showEmailModal)
	{
		<div class="modal">
			<div class="modal-content">
				<span class="close-button" @onclick="ToggleEmailModal">x</span>
				<h2>Enter your email</h2>
				<input style="border-radius: 3px; border-color" type="email" @bind="userEmail" placeholder="Fyll i din e-postadress"/>
				<button style="background-color:#2ab083; color: white; border-radius: 3px; border-color: #2ab083; margin-top: 3px;" @onclick="SendResultToEmail"><b>SKICKA MITT RESULTAT</b></button>
				@if (emailSendStatus == EmailSendStatus.Sending)
				{
					<br />
					<div>
					<div class="loading-spinner"></div> Skickar email, var god att vänta. Ta ett par djupa avkopplande andetag så är det snart skickat...
					</div>
				}
			</div>
		</div>
	}

	@if (showEmailStatusModal)
	{
		<div class="modal">
			<div class="modal-content">
				<span class="close-button" @onclick="ToggleEmailStatusModal">x</span>
				@if (emailSendStatus == EmailSendStatus.Sent)
				{
					<h2>Email sent successfully!</h2>
				}
				else if (emailSendStatus == EmailSendStatus.Failed)
				{
					<h2>There was an error sending the email. Please try again.</h2>
				}
			</div>
		</div>
	}
}


<style>
	

	.center-container {
		padding: 220px;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		height: 78vh; 
		text-align: center; 
	}

	footer {
		background-color: #f8f8f8;
		padding-top: 20px;
		text-align: center;
	}

		footer p {
			color: #333;
		}

	.modal {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.7);
		display: flex;
		justify-content: center;
		align-items: center;
		z-index: 1000;
	}

	.modal-content {
		background-color: #f4f4f4;
		padding: 70px;
		border-radius: 5px;
		width: 50%;
	}

	.close-button {
		cursor: pointer;
		position: absolute;
		top: 10px;
		right: 20px;
		font-size: 24px;
	}

	.button-row {
		display: flex;
		justify-content: center;
		align-items: center;
		margin-top: 50px;
		
		
	}

</style>

@code {
	public ResultModel? Result { get; set; }
	private string[] aeStyle = { "", "" };
	private string[] kuStyle = { "", "" };
	private string[] atStyle = { "", "" };
	private string[] roStyle = { "", "" };
	private bool showEmailModal = false;
	private string userEmail = "";
	private enum EmailSendStatus { None, Sent, Failed, Sending }
	private EmailSendStatus emailSendStatus = EmailSendStatus.None;
	private bool showEmailStatusModal = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "saveResultToDb", "False");

			string jsonString = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "result");

			if (jsonString != null)
			{
				Result = JsonSerializer.Deserialize<ResultModel>(jsonString);

				if (Result != null)
				{
					int[] resultArray = { Result.Tester, Result.Gatherer, Result.IdeaGiver, Result.Explainer };
					int max = resultArray.Max();

					foreach (var item in resultArray)
					{
						if (item == max)
						{
							int index = Array.IndexOf(resultArray, item);

							switch (index)
							{
								case 0:
									aeStyle[0] = "color: red; text-decoration: underline;";
									aeStyle[1] = "border: solid 2px red;";
									break;
								case 1:
									atStyle[0] = "color: red; text-decoration: underline;";
									atStyle[1] = "border: solid 2px red;";
									break;
								case 2:
									kuStyle[0] = "color: red; text-decoration: underline;";
									kuStyle[1] = "border: solid 2px red;";
									break;
								case 3:
									roStyle[0] = "color: red; text-decoration: underline;";
									roStyle[1] = "border: solid 2px red;";
									break;
								default:
									break;
							}
						}
					}
				}

				StateHasChanged();
			}
		}
	}

	private void ToggleEmailModal()
	{
		showEmailModal = !showEmailModal;
	}

	private void ToggleEmailStatusModal()
	{
		showEmailStatusModal = !showEmailStatusModal;

		if (!showEmailStatusModal)
		{
			emailSendStatus = EmailSendStatus.None;
		}
	}

	private async Task SendResultToEmail()
	{
		try
		{
			emailSendStatus = EmailSendStatus.Sending;
			await EmailService.SendEmailAsync(await EmailService.CreateEmailMessageAsync(userEmail));

			emailSendStatus = EmailSendStatus.Sent;
		}
		catch
		{
			emailSendStatus = EmailSendStatus.Failed;
		}

		showEmailModal = false;
		showEmailStatusModal = true;
	}
}
