@page "/Statistic"
@inject IResultService ResultService
@inject IJSRuntime JSRuntime

<PageTitle>Statistik</PageTitle>

@if (labels != null)
{
	<div style="display:flex;justify-content:center;">
		<div style="margin-top:1rem;display:flex;flex-direction:column;align-items:center;max-width:60rem;">
			<h1>Statistik</h1>
			<h3 style="max-width:30rem;">Nedan följer statistik för @noOfTests genomförda tester. Andelen i procent ovanför varje kolumn motsvarar genomsnittet av hur de @noOfTests personer som har genomfört testet svarade.</h3>
			<div style="display:flex; margin-top:3rem;">
				<div class="result-text-container">
					<h3 style="text-align:center; color:red;">@Math.Round(data[1],2) %</h3>
					<h3>Prövare (AE)</h3>
					<ul>
						<li>
							Är väldigt
							aktiv och
							handlings-
							inriktad och
							därför passar
							inte
							traditionella
							föreläsningar
							då man sitter
							still mycket.
						</li>
						<li>
							Personen i
							fråga vill
							arbeta
							praktiskt och
							hittar ofta
							nya sätt
							då han/hon
							kan använda
							sina nya
							kunskaper.
						</li>
						<li>
							Prövaren styr
							sin
							upptäckarlust
							och lär sig
							genom
							experiment.
						</li>
						<li>
							Frågar sig:
							Om?
						</li>
					</ul>
				</div>
				<div class="result-text-container">
					<h3 style="text-align:center; color:red;">@Math.Round(data[0],2) %</h3>
					<h3>Idégivare (KU)</h3>
					<ul>
						<li>
							Vill gärna ha
							en
							känslomässig
							koppling till
							det som ska
							läras och vill
							veta varför
							man ska lära
							sig det som
							ska läras.
						</li>
						<li>
							Idégivaren lär
							sig genom att
							uppleva saker
							och lär
							genom
							att se när
							andra arbetar
							praktiskt. Att
							se film är ett
							annat sätt
							som kan vara
							till bra hjälp.
						</li>
						<li>
							Idégivaren
							lär sig mest
							då han/hon
							har
							diskussioner
							med andra.
							Frågar sig:
							Varför?
						</li>
						<li>
							Frågar sig:
							Varför?
						</li>
					</ul>
				</div>
				<div class="result-text-container">
					<h3 style="text-align:center; color:red;">@Math.Round(data[3],2) %</h3>
					<h3>Sammanställare (AT)</h3>
					<ul>
						<li>
							Tänker först och
							handlar därefter.
							Man vill ha den
							teoretiska
							bakgrunden
							först och därefter
							möjligtvis tillämpa
							kunskapen
							praktiskt.
						</li>
						<li>
							Sammanställaren
							lär sig
							bäst då man
							börjar med att
							lyssna och att
							sedan få möjlighet
							att pröva och att
							få stenciler där
							allt står
							nedskrivet.
						</li>
						<li>
							Frågar sig: Hur?
						</li>
					</ul>
				</div>
				<div class="result-text-container">
					<h3 style="text-align:center; color:red;">@Math.Round(data[2],2) %</h3>
					<h3>Förklarare (RO)</h3>
					<ul>
						<li>
							Behöver ha
							teori och
							fakta och
							tänker
							igenom olika
							idéer och vill
							få fram vad
							som är viktigt.
						</li>
						<li>
							Förklararen
							vill inte prova
							praktiskt utan
							läser hellre
							manualer.
						</li>
						<li>
							Dessa elever
							klarar sig bra i
							skolan
							eftersom
							dagens skola
							har mycket
							lärarledda
							lektioner och
							föreläsningar.
						</li>
						<li>
							Frågar sig:
							Vad?
						</li>
					</ul>
				</div>
			</div>
			<PieChart Labels="@labels" Data="@data"></PieChart>
			<NavLink class="nav-link" href="/">
				<button class="btn btn-primary" @*@onclick="StartTest" *@>GO BACK TO THE MAIN PAGE</button>
			</NavLink>
		</div>
	</div>
}
<footer>
	<p>&copy; 2023 Kolb's "Learning Style" Test App. All rights reserved.</p>
</footer>

<style>
	/* .font-example {
										font-family: 'MentiDisplay-Regular';
									}*/

	.center-container {
		padding: 220px;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		height: 1200px; /* This will center-align vertically by using the full viewport height */
		text-align: center; /* This will center-align the text horizontally */
	}

	footer {
		background-color: #f8f8f8;
		padding-top: 20px;
		text-align: center;
	}

		footer p {
			color: #333;
		}
</style>

@code {
	private List<ResultModel> results;
	private int noOfTests;

	private int Index = -1;
	private string[] labels { get; set; }
	private double[] data { get; set; }

	protected override async void OnInitialized()
	{
		// results = await ResultService.GetResultsAsync();
	}

	protected override async void OnParametersSet()
	{
		//results = await ResultService.GetResultsAsync();

		//data = CalculateProcentData();

		//labels = new string[] { "IdeaGiver", "Tester", "Explainer", "Gatherer" };

		//StateHasChanged();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			results = await ResultService.GetResultsAsync();
			
			noOfTests = results.Count();

			data = CalculateProcentData();

			labels = new string[] { "IdeaGiver", "Tester", "Explainer", "Gatherer" };

			await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "saveResultToDb", "False");
    
			StateHasChanged();
		}
		//if (firstRender)
		//{
		//    results = await ResultService.GetResultsAsync();
		//    data = CalculateProcentData();
		//    labels = new string[]{ "IdeaGiver", "Tester", "Explainer", "Gatherer" };
		//}
	}
	private double GetAverage(string type)
	{
		double sum = 0;
		foreach (var result in results)
		{
			switch (type)
			{
				case "IdeaGiver":
					sum += result.IdeaGiver;
					break;
				case "Tester":
					sum += result.Tester;
					break;
				case "Explainer":
					sum += result.Explainer;
					break;
				case "Gatherer":
					sum += result.Gatherer;
					break;
			}
		}
		return sum / results.Count;
	}
	private double[] CalculateProcentData()
	{
		if (results == null) return new double[] { 25 , 25, 25, 25 };

		double[] temp = { 0, 0, 0, 0 };
		foreach (var result in results)
		{
			int maxScore = new[] { result.IdeaGiver, result.Tester, result.Explainer, result.Gatherer }.Max(); //Leta upp högsta värdet
			temp[Array.IndexOf(new[] { result.IdeaGiver, result.Tester, result.Explainer, result.Gatherer }, maxScore)]++; // Addera till rätt index
		}
		temp = temp.Select(x => (x * 100) / noOfTests).ToArray();

		return temp;
	}
}
