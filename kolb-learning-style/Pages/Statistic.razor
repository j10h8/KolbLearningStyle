@page "/Statistic"
@inject IResultService ResultService



<PageTitle>Test Results</PageTitle>


@if (labels != null)
{
    <div class="font-example">
        <div class="center-container">
            <h1>Worldwide Statistics:</h1>
            <br />
            <p>
                Epsum
                Kolb states that learning involves the acquisition of abstract concepts that can be applied flexibly in a range of situations.
                In Kolb’s theory, the impetus for the development of new concepts is provided by new experiences.
            </p>
            <br />
            <PieChart Labels="@labels" Data="@data"></PieChart>
            <br />
            <NavLink class="nav-link" href="/">
                <button class="btn btn-primary" @*@onclick="StartTest" *@>GO BACK TO THE MAIN PAGE</button>
            </NavLink>
        </div>
    </div>
}
@*<footer>

	<p>&copy; 2023 Kolb's "Learning Style" Test App. All rights reserved.</p>
</footer>*@

<style>
	/* .font-example {
					font-family: 'MentiDisplay-Regular';
				}*/

	.center-container {
		padding: 220px;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		height: 1200px; /* This will center-align vertically by using the full viewport height */
		text-align: center; /* This will center-align the text horizontally */
	}

	footer {
		background-color: #f8f8f8;
		padding-top: 20px;
		text-align: center;
	}

		footer p {
			color: #333;
		}
</style>

@code {
    private List<ResultModel> results;

    private int Index = -1;
    private string[] labels { get; set; }
    private double[] data { get; set; }

    protected override async void OnInitialized()
    {
        //results = await ResultService.GetResultsAsync();
    }
    protected override async void OnParametersSet()
    {
        results = await ResultService.GetResultsAsync();
        data = CalculateProcentData();
        labels = new string[] { "IdeaGiver", "Tester", "Explainer", "Gatherer" };
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender)
        //{
        //    results = await ResultService.GetResultsAsync();
        //    data = CalculateProcentData();
        //    labels = new string[]{ "IdeaGiver", "Tester", "Explainer", "Gatherer" };
        //}
    }
    private double GetAverage(string type)
    {
        double sum = 0;
        foreach (var result in results)
        {
            switch (type)
            {
                case "IdeaGiver":
                    sum += result.IdeaGiver;
                    break;
                case "Tester":
                    sum += result.Tester;
                    break;
                case "Explainer":
                    sum += result.Explainer;
                    break;
                case "Gatherer":
                    sum += result.Gatherer;
                    break;
            }
        }
        return sum / results.Count;
    }
    private double[] CalculateProcentData()
    {
        if (results == null) return new double[] { 40, 40, 10, 10 };

        double[] temp = { 0, 0, 0, 0 };
        foreach (var result in results)
        {

            if (result.IdeaGiver >= Max(new int[] { result.Tester, result.Explainer, result.Gatherer }))
            {
                temp[0]++;
            }
            else if (result.Tester >= Max(new int[] { result.IdeaGiver, result.Explainer, result.Gatherer }))
            {
                temp[1]++;
            }
            else if (result.Explainer >= Max(new int[] { result.IdeaGiver, result.Tester, result.Gatherer }))
            {
                temp[2]++;
            }
            else if (result.Gatherer >= Max(new int[] { result.IdeaGiver, result.Tester, result.Explainer }))
            {
                temp[3]++;
            }
        }
        for (int i = 0; i < temp.Length; i++)
        {
            if (temp[i] > 0)
            {
                temp[i] = (temp[i]*100) / results.Count();
            }
        }
        return temp;
    }
    private int Max(int[] numbers)
    {
        int max = 0;
        foreach (var number in numbers)
        {
            if (number > max)
            {
                max = number;
            }
        }
        return max;
    }
}
```