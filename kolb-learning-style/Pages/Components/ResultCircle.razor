
<h3 style="margin-top:3rem;">Kolbs lärcirkel</h3>

<BECanvas Width="@canvasSize" Height="@canvasSize" @ref="_canvasReference"></BECanvas>

@code {
    [Parameter]
    public ResultModel Result { get; set; } 

    private Canvas2DContext? _context;

    protected BECanvasComponent? _canvasReference;

    public int canvasSize = 500;
    private int circleRadius => (canvasSize-200)/2;
    private int middle => canvasSize / 2;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this._context = await this._canvasReference.CreateCanvas2DAsync();

        await DrawAllCircles(circleRadius);
        await DrawAllLabels();
        await DrawRektangle(Result,circleRadius);
    }

    private async Task DrawAllCircles(int outherRadius)
    {
        int innerRadius = outherRadius/5;

        await DrawCircle(outherRadius,"25");
        await DrawCircle(innerRadius*4,"20");
        await DrawCircle(innerRadius*3,"15");
        await DrawCircle(innerRadius*2,"10");
        await DrawCircle(innerRadius,"5");
    }
    private async Task DrawAllLabels()
    {
        await DrawText("Idégivare (KU)", canvasSize - 70, 10, 0,10); //Uppe Höger
        await DrawText("Prövare (AE)", 10, 10, 0,10); //Uppe Vänster
        await DrawText("Förklarare (RO)", canvasSize - 70, canvasSize - 30, 0,10); // Nere Höger
        await DrawText("Sammanställare (AT)", 10, canvasSize - 30, 0,10); //Nere Vänster

        await DrawText("Aktivt exprimenterande", 10, canvasSize / 2, -90,10); // Left
        await DrawText("Konkreta upplevelser", canvasSize/2-50, 10, 0,10); // Top
        await DrawText("Reflekterande observation", canvasSize-70, canvasSize / 2, 90,10); // Right
        await DrawText("Abstrakt tänkande", canvasSize/2-30, canvasSize-30, 0,10); // Bottom
    }
    private async Task DrawText(string text, int x, int y, int direction, int size)
    {
        await this._context.SetFontAsync($"{size}px Calibri");
        //await this._context.RotateAsync((float)Math.PI);
        //await this._context.StrokeTextAsync(text, x, y);


        // Rotate the context by the specified direction angle (in radians)
        //await this._context.RotateAsync(Convert.ToSingle(direction) * Convert.ToSingle(Math.PI) / (float)180);

        // Draw the text
        await this._context.StrokeTextAsync(text, x, y);

        // Reset the rotation and translation for future drawings
        await this._context.RotateAsync(0);
    }

    private async Task DrawRektangle(ResultModel resultModel, int circleRadius)
    {
        int circleSize = circleRadius / 25;
        await _context.SetStrokeStyleAsync("red");
        await _context.BeginPathAsync();        
        await this._context.MoveToAsync(middle + (resultModel.IdeaGiver * circleSize), middle); // Move to right point
        await this._context.LineToAsync(middle, middle - (resultModel.Explainer*circleSize)); // Draw line to bottom point
        await this._context.LineToAsync(middle - (resultModel.Tester*circleSize), middle); // Draw line to left point
        await this._context.LineToAsync(middle, middle + (resultModel.Gatherer*circleSize)); // Draw line to top point
        await this._context.LineToAsync(middle + (resultModel.IdeaGiver*circleSize), middle); // Draw line to right point
        await this._context.StrokeAsync();
    }
    
    private async Task DrawCircle(int radius, string text)
    {
        await _context.SetStrokeStyleAsync("black");
        await _context.BeginPathAsync();
        await _context.ArcAsync(middle, middle, radius, 0, Math.PI * 2, true);
        await _context.StrokeAsync();
        await PrintRadius(radius, text);
    }
    private async Task PrintRadius(int radius, string text)
    {
        await this._context.SetFontAsync("12px Calibri");
        await this._context.StrokeTextAsync(text, middle + radius, middle);
        await this._context.StrokeTextAsync(text, middle, middle + radius);
        await this._context.StrokeTextAsync(text, middle - radius, middle);
        await this._context.StrokeTextAsync(text, middle, middle - radius);
        
    }
}
