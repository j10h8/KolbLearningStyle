<BECanvas Width="@canvasSize" Height="@canvasSize" @ref="_canvasReference"></BECanvas>

@code {
    [Parameter]
    public ResultModel Result { get; set; } 
    private Canvas2DContext? _context;
    protected BECanvasComponent? _canvasReference;
    public int canvasSize = 400;
    private int circleRadius => (canvasSize-200)/2;
    private int middle => canvasSize / 2;
    private int height => canvasSize - 100;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this._context = await this._canvasReference.CreateCanvas2DAsync();
            await _context.ClearRectAsync(0, 0, canvasSize, canvasSize); // Clear the canvas
            await DrawAllCircles(circleRadius);
            await DrawAllLabels();
            await DrawRektangle(Result, circleRadius);
        }
    }

    private async Task DrawAllCircles(int outherRadius)
    {
        int innerRadius = outherRadius/5;
        await DrawCircle(outherRadius,"25");
        await DrawCircle(innerRadius*4,"20");
        await DrawCircle(innerRadius*3,"15");
        await DrawCircle(innerRadius*2,"10");
        await DrawCircle(innerRadius,"5");
    }

    private async Task DrawAllLabels()
    {
        await DrawText("Känna och titta", canvasSize - 85, 10, 0, 12); //Uppe Höger
        await DrawText("Göra konkreta", canvasSize - 75, 25, 0, 11); //Uppe Höger
        await DrawText("upplevelser", canvasSize - 75, 35, 0, 11); //Uppe Höger
        await DrawText("och erfarenheter", canvasSize - 75, 45, 0, 11); //Uppe Höger

        await DrawText("Känna och göra", 5, 10, 0,12); //Uppe Vänster
        await DrawText("Tillämpa,", 15, 25, 0, 11);
        await DrawText("omsätta i nya", 15, 35, 0, 11);
        await DrawText("situationer", 15, 45, 0, 11);

        await DrawText("Tänka och titta", canvasSize - 85, canvasSize - 70, 0,12); // Nere Höger
        await DrawText("Göra", canvasSize - 75, canvasSize - 55, 0, 10);
        await DrawText("observationer", canvasSize - 75, canvasSize - 45, 0, 11);
        await DrawText("och", canvasSize - 75, canvasSize - 35, 0, 11);
        await DrawText("reflektioner", canvasSize - 75, canvasSize - 25, 0, 11);

        await DrawText("Tänka och göra", 5, canvasSize - 70, 0,12); //Nere Vänster
        await DrawText("Lära genom", 15, canvasSize - 55, 0,11); //Nere Vänster
        await DrawText("att kunna", 15, canvasSize - 45, 0,11); //Nere Vänster
        await DrawText("abstrahera", 15, canvasSize - 35, 0,11); //Nere Vänster
        await DrawText("generalisera", 15, canvasSize - 25, 0,11); //Nere Vänster
        await DrawText("vara logisk", 15, canvasSize - 15, 0,11); //Nere Vänster

        await DrawText("Aktivt", 5, canvasSize / 2, -90,12); // Left
        await DrawText("Exprimenterande", 5, (canvasSize / 2)+10, -90,12); // Left

        await DrawText("Konkreta upplevelser", canvasSize/2-50, 10, 0,12); // Top

        await DrawText("Reflekterande", canvasSize-85, canvasSize / 2, 90,12); // Right
        await DrawText("Observation", canvasSize-85, (canvasSize / 2)+10, 90,12); // Right

        await DrawText("Abstrakt Tänkande", canvasSize/2-50, canvasSize-30, 0,12); // Bottom
    }
    private async Task DrawText(string text, int x, int y, int direction, int size)
    {
        await this._context.SetFontAsync($"{size}px Arial");
        //await this._context.RotateAsync((float)Math.PI);
        //await this._context.StrokeTextAsync(text, x, y);

        // Rotate the context by the specified direction angle (in radians)
        //await this._context.RotateAsync(Convert.ToSingle(direction) * Convert.ToSingle(Math.PI) / (float)180);

        // Draw the text
        await this._context.StrokeTextAsync(text, x, y);

        // Reset the rotation and translation for future drawings
        await this._context.RotateAsync(0);
    }

    private async Task DrawRektangle(ResultModel resultModel, int circleRadius)
    {
        int circleSize = circleRadius / 25;
        await _context.SetStrokeStyleAsync("red");
        await _context.SetLineWidthAsync(3);
        await _context.BeginPathAsync();        
        await this._context.MoveToAsync(middle + (resultModel.Explainer * circleSize), middle); // Move to right point
        await this._context.LineToAsync(middle, middle - (resultModel.IdeaGiver*circleSize)); // Draw line to top point
        await this._context.LineToAsync(middle - (resultModel.Tester*circleSize), middle); // Draw line to left point
        await this._context.LineToAsync(middle, middle + (resultModel.Gatherer*circleSize)); // Draw line to bottom point
        await this._context.LineToAsync(middle + (resultModel.Explainer*circleSize), middle); // Draw line to right point
        await this._context.StrokeAsync();
    }
    
    private async Task DrawCircle(int radius, string text)
    {
        await _context.SetStrokeStyleAsync("black");
        await _context.BeginPathAsync();
        await _context.ArcAsync(middle, middle, radius, 0, Math.PI * 2, true);
        await _context.StrokeAsync();
        await PrintRadius(radius, text);
    }
    private async Task PrintRadius(int radius, string text)
    {
        await this._context.SetFontAsync("12px Calibri");
        await this._context.StrokeTextAsync(text, middle + radius, middle);
        await this._context.StrokeTextAsync(text, middle, middle + radius);
        await this._context.StrokeTextAsync(text, middle - radius, middle);
        await this._context.StrokeTextAsync(text, middle, middle - radius);
    }
}
